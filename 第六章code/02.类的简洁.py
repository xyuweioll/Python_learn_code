a=int(10) #创建一个int类的实例
b=str('hello')#创建一个str类的实例


#定义一个简单的类
#使用class关键字来定义类，语法和函数很像！
#语法：
#class 类名([父类]):
#    代码块
class MyClass():
	pass

# print(MyClass)
#使用MyClass创建一个对象
#使用类来创建对象就像调用一个函数一样
mc=MyClass()#mc就是通过MYClass创建的对象，mc是MyClass的实例
print(mc)
#isinstance()用来检查一个对象是否是一个类的实例
result=isinstance(mc,MyClass)
print(result)


#-类也是一个对象！即类就是一个创建对象的对象！
#类是一个type类型的对象,定义类实际上就是定义了一个type类型的对象
#可以向对象中添加变量，对象中的变量称为属性
#语法：对象.属性名=属性值
mc.name='swk'
print(mc.name)


#类的定义：
#     类和对象都是对现实生活中或程序中的内容的抽象
#     实际上所有的事物都由两部分构成：1.数据（属性） 2.行为（方法）
#     在类的代码块中，我们可以定义变量和函数，
#     变量会成为该类实例的公共属性，所有该类实例都可以通过  对象.属性名的形式访问
#     函数会成为该类实例的公共方法，所有该类实例都可以通过  对象.方法名()的形式
#     调用方法

#-注意：方法调用时会默认传递一个参数(由解析器自动传递)，所以方法中至少要定义一个形参    

#实例为什么能够访问到类中的属性和方法
#    类中定义的属性和方法都是公共的，任何该类实例都可以访问

#    -属性和方法查找的流程
#         当我们调用一个对象的属性时，解析器会先在当前对象中寻找是否含有该属性
#         如果有，则直接返回当前对象的属性值，如果没有则去当前对象的类对象中
#         去寻找，如果有则返回类对象的属性值，如果没有则报错！

#一般情况下，属性保存到实例对象中，而方法需要保存到类对象中。