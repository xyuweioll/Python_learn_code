#尝试求10的阶乘(10!)
# n=1
# for i in range(2,11):
# 	n*=i
# print(n)
#创建一个函数可以求任意数的阶乘
# def lc(n):
# 	for i in range(1,n):
# 	 	n*=i
# 	print(n)

# a=int(input('请输入n->'))
# lc(a)

#递归式的函数
#递归简单来理解就是自己去引用自己!
#递归式函数，在函数中自己调用自己!
#无穷递归，如果这个函数被调用，程序的内存会溢出效果类似于死循环
#递归是解决问题的一种方式，它和循环很像
#它的整体思想是，将一个大问题分解为一个个的小问题，直到问题无法分解时，再去解决	
#问题
#递归式函数的两个条件
#    1、基线条件
#			-问题可以被分解为最小问题，当满足极限条件时递归就不再执行了
#    2、递归条件
#			-将问题继续分解的条件
#递归和循环类似，基本可以互相替代

# def factorial(n):
	# ''' 
	# 该函数用来求任意数的阶乘
	# 参数：
	#      n 要求阶乘的数字 
	# '''
	# 基线条件 判断n 是否为1，如果为1则此时不能再继续递归
# 	if n==1:
# 		return 1

# 	return n*factorial(n-1)


# print(factorial(10))

  



#练习
#	创建一个函数power来为任意数字做幂运算n**i
# def mi(n,i):
# 	if i==0:
# 		return 1
# 	return n*mi(n,i-1)
# print(mi(2,4))

# 创建一个函数，用来检查一个任意的字符串是否是回文字符串，如果是返回True,否则返回
#False
#回文字符串，字符串从前往后念和从后往前念是一样的

def hui_wen(s):
	'''
	该函数用来检查指定的字符串是否是回文字符串，如果是返回True,否则返回False
	参数：
	     s:就是要检查的字符串
	'''
	if len(s)<2:
		return True
	elif s[0] != s[-1]:
		return False
	return hui_wen(s[1:-1])
print(hui_wen('asdfghgfdsa'))

##函数式编程
#-在Python中，函数是一等对象
# 一等对象一般都会具备如下特定：
#     1、对象是在运行时创建的
#     2、能赋值给变量或作为数据结构中的元素
#     3、能作为参数传递
#     4、能作为返回值返回

#-高阶函数
#    -高阶函数至少要符合以下两点特点中的一点
#      1、接收一个或多个函数作为参数
#      2、将函数作为返回值返回