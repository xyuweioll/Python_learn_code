#创建几个函数

# def add(a,b):
# 	'''
# 	求任意两个数的和
# 	'''
# 	return a+b


# def mul(a,b):
# 	'''
# 	求任意两个数的积
# 	'''
# 	return a*b	
	

#希望函数在开始计算前打印开始计算，计算结束后打印计算完毕
#该需求我们可以通过直接修改函数中的代码来完成这个需求，但会产生以下一些问题：
#1.如果需要修改的函数过多，修改起来比较麻烦，2不方便后期的维护
#3.并且会违反开闭原则(OCP)
           #程序的设计，要求开放对程序的扩展，要关闭对程序的修改

#我们希望在不修改函数的情况下，来对函数进行拓展。

#为了解决这个问题，可以创建一个函数，让这个函数自动生成函数

# def begin_end(old):
# 	'''
# 	用来对其他函数进行拓展，使其他函数开始前打印开始打印，结束后打印结束打印
#     '''
#     #old 为要扩展的函数对象
#     def new_function():
#     	print('开始执行')
#         old()
#     	print('执行结束')

#      return new_function 


     #在开发中，都是通过装饰器来拓展函数功能的
     #在定义函数时，可以通过@装饰器，来使用指定的装饰器，来装饰当前的函数
     #可以为一个函数指定多个装饰器，这样函数将会按照从内向外的顺序被装饰
     #

