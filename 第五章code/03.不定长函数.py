#不定长参数
#定义一个函数,可以求任意个数字的和
#在定义函数时,可以在形参前边加一个*,这样这个形参将会获取到所有的实参
#它将会将所有的实参保存到一个元组中

# def fn(*a):
# 	print('a=',a)
# fn(1,2,3,4,5) 
# a= (1, 2, 3, 4, 5)
# [Finished in 0.1s]
#*a会接受所有的位置实参,并且会将这些实参统一保存到一个元组中(装包)
# def fn(*a):
# 	result=0
# 	for n in a:
# 		result+=n
# 	print(result)
# fn(1,2,3,4,5,6,7,8)
# 36
# [Finished in 0.1s]
#带*的形参只能写一个
#带*的参数可以和其他参数配合使用
# def fn2(a,b,*c):
# 	print('a=',a)
# 	print('b=',b)
# 	print('c=',c)	

# fn2(1,2,3,3,5,79,6)
# a= 1
# b= 2
# c= (3, 3, 5, 79, 6)
# [Finished in 0.1s]
#可变参数不是必须写在最后，但是注意，带*的参数后的所有参数，必须以关键字参数的形式
#传递:
#如下，a=1,后边的值赋给b，c必须使用关键字参数
#
# def fn2(a,*b,c):
# 	print('a=',a)
# 	print('b=',b)
# 	print('c=',c)	

# fn2(1,2,3,3,5,79,c=6)
# a= 1
# b= (2, 3, 3, 5, 79)
# c= 6
# [Finished in 0.1s]

#*形参只能接受位置参数，而不能接受关键字参数
#**形参可以接收其他的关键字参数，它会将这些参数统一保存到一个字典中
# 字典的key就是参数的名字，字典的值就是参数的值
#**形参只能有一个，并且必须写在所有参数的最后
# def fn3(**a):
# 	print('a=',a,type(a))
# fn3(b=1,d=2,c=3)
# a= {'b': 1, 'd': 2, 'c': 3} <class 'dict'>
# [Finished in 0.1s]


#参数的解包
def fn4(a,b,c):
	print('a=',a)
	print('b=',b)
	print('c=',c)	
# fn4(1,2,3)

#创建一个元组
# t=(10,20,30)
# fn4(t[0],t[1],t[2])

#传递实参时，也可以在序列类型的参数前添加*，这样它会自动将序列中的元素依次作为
#参数传递，这里要求序列中元素的个数必须和形参的个数一致
# fn4(*t)

#创建一个字典
d={'a':100,'b':200,'c':300}
#通过**来对一个字典进行解包操作
fn4(**d)
a= 100
b= 200
c= 300
[Finished in 0.1s]






